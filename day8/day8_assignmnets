
Q1
define your exception class by name "MyArithException"(MyArithException.java)define class "Calculator"(Calculator.java)
In this class define a function,which will accept an int and return double of it.e.g int caldouble(int) This function will check an int which is   passed to it It will raise the  exception if 0 is passed or negative passed in case of 0 caller of this method should get error message
"Zero not allowed" in case of negative caller of this method should get error message "negative not allowed" In case of positive value it should simply return the double value. [ this method shouldn't handle the exception]
Now define class "MyCalcApp" (MyCalcApp.java)In this class you accept a number from user and pass that no. to
caldouble() method which is mentioned above.


ANS:


package javaCodes;


import java.util.Scanner;


class MyArithException extends Exception
{
public MyArithException(String mess)
{
super(mess);
}
}


class Calculator
{
static int calDouble(int k) throws MyArithException
{
if(k==0)
{
throw new MyArithException("Zero not allowed");
}
if(k<0)
{
throw new MyArithException("negative not allowed");
}
return k*k;
}
}


public class MyCalcApp
{
public static void main(String args[])
{
System.out.println("enter a number");
Scanner sc= new Scanner(System.in);
int a=sc.nextInt();
try 
{
int num=Calculator.calDouble(a);
System.out.println(num);
}
catch(MyArithException e)
{
System.out.println(e);
}
}
}



Q2 on the developer side create an exception:NumberNotDivisibleBySevenException as a checked exception create necessary jar and documentation.
on client side  public class MyMath class with public void disp(int num) this disp() method will check if the number passed is not divisible by 7 , it will raise "NumberNotDivisibleBySevenException" or else it will simply display the number passed.
        [ this method shouldn't handle the exception]
        public class Demo
                main function 
                invoke "disp()" of "MyMath" class.
ANS: 


Developer Side:
package Developer;


public class NumberNotDivisibleBySevenException extends Exception
{
public NumberNotDivisibleBySevenException(String mess)
{
super(mess);
}
}


Client Side:
package client;
import java.util.*;
import Developer.NumberNotDivisibleBySevenException;


class MyMath
{
public static void disp(int num) throws NumberNotDivisibleBySevenException
{


if(num%7!=0) 
{
throw new NumberNotDivisibleBySevenException("num is not divisible by 7");
}
else
{
System.out.println("Number is divisible by 7");
}


}
}
public class Demo
{
public static void main(String args[])
{
MyMath m=new MyMath();
System.out.println("enter a number");
Scanner sc= new Scanner(System.in);
int a=sc.nextInt();
try{
m.disp(a);
}
catch(NumberNotDivisibleBySevenException e)
{
System.out.println(e);
}
}
}




























Q3
define "MyException" as a checked exception. define a class "Demo" with public void show1(), public void show2() , public void show3() and main functions.inside "show3()" accept a number and if it is greater than 10 raise "MyException" else display the number.
        [ this method shouldn't handle the exception]
main() function should call "show1()" , 
show1() function should call "show2()",
show2() function should call "show3()"
show2() should not handle the exception but show1() should handle.


ANS: 


package javaCodes;


import java.util.Scanner;


class MyException extends Exception
{
public MyException(String mess)
{
super(mess);
}
}


class Demo
{
public void show1(int num)
{
try
{
show2(num);
}
catch(MyException me)
{
System.out.println(me);
}
}
public void show2(int num)throws MyException
{
show3(num);
}
public void show3(int num)throws MyException
{
if(num>10)
{
throw new MyException("number is greater than 10");
}
else 
{
System.out.println("number is "+num);
}
}
}


public class MyExQ3
{
public static void main(String args[])
{
Demo d=new Demo();
System.out.println("enter a number");
Scanner sc= new Scanner(System.in);
int a=sc.nextInt();
d.show1(a);
}



Q4
on the developer side create following checked exception:InvalidLengthException create necessary jar file and documentation.
on client side public class Authenticatorwith a parameterized constructor which takes String as a password.
this class also will have "done()" method with "successful authentication" message.
Parameterized constructor should check the length of the password passed if it is less than 5 or more that 9 , it should raise "InvalidLengthException" 
        [ constructor shouldn't handle the exception]
create a class "Demo" with main inside main function create the object of "Authenticator" class and invoke "done()" method.


ANS:


package ddd;
On developer side:
public class InvalidLengthException extends Exception
{
   public InvalidLengthException(String Mess)
   {
           super(Mess);
   }
}


On client side:
package client;


import java.util.Scanner;
import java.util.stream.IntStream;


import ddd.InvalidLengthException;


public class Authenticator 
{
        private String Password;
        public Authenticator(String Password) throws InvalidLengthException
        {
                if(Password.length()<5||Password.length()>9)
                {
                        throw new InvalidLengthException("Invalide Password");
                }
                this.Password=Password;
        }
        static void Done()
        {
                System.out.println("successful authentication");
        }
        public static void main(String[] args) 
        {
                Scanner sc=new Scanner(System.in);
                System.out.println("enter Password");
                String Pass=sc.next();
                
                try
                {
                        Authenticator A1=new Authenticator(Pass);
                        Done();
                }
                catch(InvalidLengthException m)
                {
                        System.out.println(m);
                }
        }
}



Q5 on the developer side  create checked exception "ResourceNotAllocatedException"
create a class:
public class MyResource implements AutoCloseable
{
        public MyResource(int capacity) throws ResourceNotAllocatedException
        {
                if(capacity>100)
                {
                        throw new ResourceNotAllocatedException("not sufficient space");
                }
        }
    void disp()
    {
            System.out.println("successful");
    }
        @Override
        public void close()  {
                System.out.println("resource is closed");
                
        }
}


create necessary jar file and documentation


on the client side
public class Demo with main function inside main function, create object of "MyResource" and invoke "disp()" method.


ANS:


On Developer side:
package Dve;


public class ResourceNotAllocatedException extends Exception
{
public ResourceNotAllocatedException(String mess)
{
super(mess);
}
}


package Dve;


public class MyResource implements AutoCloseable
{
public MyResource(int capacity) throws ResourceNotAllocatedException
{
if(capacity>100)
{
throw new ResourceNotAllocatedException("not sufficient space");
}
}
public void disp()
{
System.out.println("successful");
}
@Override
public void close() {
System.out.println("resource is closed");
}
}


On client side:
package Cli;
import java.util.*;
import Dve.MyResource;
import Dve.ResourceNotAllocatedException;


public class Demo
{
public static void main(String[] args) 
{
Scanner sc=new Scanner(System.in);
System.out.println("Enter File size: ");
int cap=sc.nextInt();
try {
MyResource m=new MyResource(cap); 
m.disp();
m.close();
}
catch(ResourceNotAllocatedException e)
{
System.out.println(e);
}
}
}
